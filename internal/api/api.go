//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for ObjectType.
const (
	Album  ObjectType = "album"
	Artist ObjectType = "artist"
	Count  ObjectType = "count"
	Song   ObjectType = "song"
)

// Error defines model for Error.
type Error struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

// Object defines model for Object.
type Object struct {
	ArtURL      *string             `json:"artURL,omitempty"`
	Count       *float32            `json:"count,omitempty"`
	Id          *openapi_types.UUID `json:"id,omitempty"`
	NameOrTitle *string             `json:"nameOrTitle,omitempty"`

	// Type An artist, an album or a song
	Type *ObjectType `json:"type,omitempty"`
}

// ObjectType An artist, an album or a song
type ObjectType string

// ObjectArray List of artists, albums or songs
type ObjectArray = []Object

// SongsGetbyAlbumIDParams defines parameters for SongsGetbyAlbumID.
type SongsGetbyAlbumIDParams struct {
	// Count return result count instead of results
	Count *bool `form:"count,omitempty" json:"count,omitempty"`
}

// AlbumGetbyArtistIDParams defines parameters for AlbumGetbyArtistID.
type AlbumGetbyArtistIDParams struct {
	// Count return result count instead of results
	Count *bool `form:"count,omitempty" json:"count,omitempty"`
}

// SongsGetbyArtistIDParams defines parameters for SongsGetbyArtistID.
type SongsGetbyArtistIDParams struct {
	// Count return result count instead of results
	Count *bool `form:"count,omitempty" json:"count,omitempty"`
}

// SearchForAlbumsParams defines parameters for SearchForAlbums.
type SearchForAlbumsParams struct {
	// Count return result count instead of results
	Count *bool `form:"count,omitempty" json:"count,omitempty"`
}

// SearchForArtistsParams defines parameters for SearchForArtists.
type SearchForArtistsParams struct {
	// Count return result count instead of results
	Count *bool `form:"count,omitempty" json:"count,omitempty"`
}

// SearchForSongsParams defines parameters for SearchForSongs.
type SearchForSongsParams struct {
	// Count return result count instead of results
	Count *bool `form:"count,omitempty" json:"count,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get an album info by ID.
	// (GET /album/{id})
	AlbumGetbyID(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Get songs by album ID.
	// (GET /album/{id}/songs)
	SongsGetbyAlbumID(w http.ResponseWriter, r *http.Request, id openapi_types.UUID, params SongsGetbyAlbumIDParams)
	// Get an artist info by ID.
	// (GET /artist/{id})
	ArtistGetbyID(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Get albums by artist ID.
	// (GET /artist/{id}/albums)
	AlbumGetbyArtistID(w http.ResponseWriter, r *http.Request, id openapi_types.UUID, params AlbumGetbyArtistIDParams)
	// Get songs by artist ID.
	// (GET /artist/{id}/songs)
	SongsGetbyArtistID(w http.ResponseWriter, r *http.Request, id openapi_types.UUID, params SongsGetbyArtistIDParams)
	// Pause whatever is being played currently.
	// (POST /play/pause)
	PlayPause(w http.ResponseWriter, r *http.Request)
	// Unpause.
	// (POST /play/unpause)
	PlayUnpause(w http.ResponseWriter, r *http.Request)
	// Play queue, artist's album(s) or song.
	// (POST /play/{id})
	Play(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Delete album or song(s) from the queue.
	// (DELETE /queue/delete/{range_start}/{range_end})
	QueueDeleteFromByRange(w http.ResponseWriter, r *http.Request, rangeStart int64, rangeEnd int64)
	// Reorder queue.
	// (POST /queue/move/{index_from}/{index_to})
	QueueReorder(w http.ResponseWriter, r *http.Request, indexFrom int64, indexTo int64)
	// Enqueue artist's album(s) or song.
	// (POST /queue/{id})
	Enqueue(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Search for albums.
	// (GET /search/{for}/in/albums)
	SearchForAlbums(w http.ResponseWriter, r *http.Request, pFor string, params SearchForAlbumsParams)
	// Search for artists.
	// (GET /search/{for}/in/artists)
	SearchForArtists(w http.ResponseWriter, r *http.Request, pFor string, params SearchForArtistsParams)
	// Search for songs.
	// (GET /search/{for}/in/songs)
	SearchForSongs(w http.ResponseWriter, r *http.Request, pFor string, params SearchForSongsParams)
	// Get a song info by ID.
	// (GET /song/{id})
	SongGetbyID(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// AlbumGetbyID operation middleware
func (siw *ServerInterfaceWrapper) AlbumGetbyID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AlbumGetbyID(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SongsGetbyAlbumID operation middleware
func (siw *ServerInterfaceWrapper) SongsGetbyAlbumID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params SongsGetbyAlbumIDParams

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", r.URL.Query(), &params.Count)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "count", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SongsGetbyAlbumID(w, r, id, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ArtistGetbyID operation middleware
func (siw *ServerInterfaceWrapper) ArtistGetbyID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ArtistGetbyID(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// AlbumGetbyArtistID operation middleware
func (siw *ServerInterfaceWrapper) AlbumGetbyArtistID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params AlbumGetbyArtistIDParams

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", r.URL.Query(), &params.Count)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "count", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AlbumGetbyArtistID(w, r, id, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SongsGetbyArtistID operation middleware
func (siw *ServerInterfaceWrapper) SongsGetbyArtistID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params SongsGetbyArtistIDParams

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", r.URL.Query(), &params.Count)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "count", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SongsGetbyArtistID(w, r, id, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PlayPause operation middleware
func (siw *ServerInterfaceWrapper) PlayPause(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PlayPause(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PlayUnpause operation middleware
func (siw *ServerInterfaceWrapper) PlayUnpause(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PlayUnpause(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// Play operation middleware
func (siw *ServerInterfaceWrapper) Play(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Play(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// QueueDeleteFromByRange operation middleware
func (siw *ServerInterfaceWrapper) QueueDeleteFromByRange(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "range_start" -------------
	var rangeStart int64

	err = runtime.BindStyledParameterWithOptions("simple", "range_start", r.PathValue("range_start"), &rangeStart, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "range_start", Err: err})
		return
	}

	// ------------- Path parameter "range_end" -------------
	var rangeEnd int64

	err = runtime.BindStyledParameterWithOptions("simple", "range_end", r.PathValue("range_end"), &rangeEnd, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "range_end", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.QueueDeleteFromByRange(w, r, rangeStart, rangeEnd)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// QueueReorder operation middleware
func (siw *ServerInterfaceWrapper) QueueReorder(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "index_from" -------------
	var indexFrom int64

	err = runtime.BindStyledParameterWithOptions("simple", "index_from", r.PathValue("index_from"), &indexFrom, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "index_from", Err: err})
		return
	}

	// ------------- Path parameter "index_to" -------------
	var indexTo int64

	err = runtime.BindStyledParameterWithOptions("simple", "index_to", r.PathValue("index_to"), &indexTo, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "index_to", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.QueueReorder(w, r, indexFrom, indexTo)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// Enqueue operation middleware
func (siw *ServerInterfaceWrapper) Enqueue(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Enqueue(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SearchForAlbums operation middleware
func (siw *ServerInterfaceWrapper) SearchForAlbums(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "for" -------------
	var pFor string

	err = runtime.BindStyledParameterWithOptions("simple", "for", r.PathValue("for"), &pFor, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "for", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForAlbumsParams

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", r.URL.Query(), &params.Count)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "count", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SearchForAlbums(w, r, pFor, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SearchForArtists operation middleware
func (siw *ServerInterfaceWrapper) SearchForArtists(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "for" -------------
	var pFor string

	err = runtime.BindStyledParameterWithOptions("simple", "for", r.PathValue("for"), &pFor, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "for", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForArtistsParams

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", r.URL.Query(), &params.Count)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "count", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SearchForArtists(w, r, pFor, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SearchForSongs operation middleware
func (siw *ServerInterfaceWrapper) SearchForSongs(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "for" -------------
	var pFor string

	err = runtime.BindStyledParameterWithOptions("simple", "for", r.PathValue("for"), &pFor, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "for", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForSongsParams

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", r.URL.Query(), &params.Count)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "count", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SearchForSongs(w, r, pFor, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SongGetbyID operation middleware
func (siw *ServerInterfaceWrapper) SongGetbyID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SongGetbyID(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/album/{id}", wrapper.AlbumGetbyID)
	m.HandleFunc("GET "+options.BaseURL+"/album/{id}/songs", wrapper.SongsGetbyAlbumID)
	m.HandleFunc("GET "+options.BaseURL+"/artist/{id}", wrapper.ArtistGetbyID)
	m.HandleFunc("GET "+options.BaseURL+"/artist/{id}/albums", wrapper.AlbumGetbyArtistID)
	m.HandleFunc("GET "+options.BaseURL+"/artist/{id}/songs", wrapper.SongsGetbyArtistID)
	m.HandleFunc("POST "+options.BaseURL+"/play/pause", wrapper.PlayPause)
	m.HandleFunc("POST "+options.BaseURL+"/play/unpause", wrapper.PlayUnpause)
	m.HandleFunc("POST "+options.BaseURL+"/play/{id}", wrapper.Play)
	m.HandleFunc("DELETE "+options.BaseURL+"/queue/delete/{range_start}/{range_end}", wrapper.QueueDeleteFromByRange)
	m.HandleFunc("POST "+options.BaseURL+"/queue/move/{index_from}/{index_to}", wrapper.QueueReorder)
	m.HandleFunc("POST "+options.BaseURL+"/queue/{id}", wrapper.Enqueue)
	m.HandleFunc("GET "+options.BaseURL+"/search/{for}/in/albums", wrapper.SearchForAlbums)
	m.HandleFunc("GET "+options.BaseURL+"/search/{for}/in/artists", wrapper.SearchForArtists)
	m.HandleFunc("GET "+options.BaseURL+"/search/{for}/in/songs", wrapper.SearchForSongs)
	m.HandleFunc("GET "+options.BaseURL+"/song/{id}", wrapper.SongGetbyID)

	return m
}
