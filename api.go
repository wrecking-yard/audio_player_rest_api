// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for ObjectTypw.
const (
	Album  ObjectTypw = "album"
	Artist ObjectTypw = "artist"
	Song   ObjectTypw = "song"
)

// Error defines model for Error.
type Error struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

// Object defines model for Object.
type Object struct {
	ArtURL      *string             `json:"artURL,omitempty"`
	Id          *openapi_types.UUID `json:"id,omitempty"`
	NameOrTitle *string             `json:"nameOrTitle,omitempty"`

	// Typw An artist, an album or a song
	Typw *ObjectTypw `json:"typw,omitempty"`
}

// ObjectTypw An artist, an album or a song
type ObjectTypw string

// ObjectArray List of artists, albums or songs
type ObjectArray = []Object

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// AlbumGetbyID request
	AlbumGetbyID(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ArtistGetbyID request
	ArtistGetbyID(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PlayPause request
	PlayPause(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PlayUnpause request
	PlayUnpause(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Play request
	Play(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueueDeleteFromByRange request
	QueueDeleteFromByRange(ctx context.Context, rangeStart int64, rangeEnd int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueueReorder request
	QueueReorder(ctx context.Context, indexFrom int64, indexTo int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Enqueue request
	Enqueue(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchFor request
	SearchFor(ctx context.Context, pFor string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SongGetbyID request
	SongGetbyID(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) AlbumGetbyID(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAlbumGetbyIDRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArtistGetbyID(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArtistGetbyIDRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlayPause(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlayPauseRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlayUnpause(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlayUnpauseRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Play(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlayRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueueDeleteFromByRange(ctx context.Context, rangeStart int64, rangeEnd int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueueDeleteFromByRangeRequest(c.Server, rangeStart, rangeEnd)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueueReorder(ctx context.Context, indexFrom int64, indexTo int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueueReorderRequest(c.Server, indexFrom, indexTo)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Enqueue(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnqueueRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchFor(ctx context.Context, pFor string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchForRequest(c.Server, pFor)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SongGetbyID(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSongGetbyIDRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewAlbumGetbyIDRequest generates requests for AlbumGetbyID
func NewAlbumGetbyIDRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/album/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewArtistGetbyIDRequest generates requests for ArtistGetbyID
func NewArtistGetbyIDRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/artist/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPlayPauseRequest generates requests for PlayPause
func NewPlayPauseRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/play/pause")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPlayUnpauseRequest generates requests for PlayUnpause
func NewPlayUnpauseRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/play/unpause")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPlayRequest generates requests for Play
func NewPlayRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/play/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQueueDeleteFromByRangeRequest generates requests for QueueDeleteFromByRange
func NewQueueDeleteFromByRangeRequest(server string, rangeStart int64, rangeEnd int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "range_start", runtime.ParamLocationPath, rangeStart)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "range_end", runtime.ParamLocationPath, rangeEnd)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/queue/delete/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQueueReorderRequest generates requests for QueueReorder
func NewQueueReorderRequest(server string, indexFrom int64, indexTo int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "index_from", runtime.ParamLocationPath, indexFrom)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "index_to", runtime.ParamLocationPath, indexTo)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/queue/move/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEnqueueRequest generates requests for Enqueue
func NewEnqueueRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/queue/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSearchForRequest generates requests for SearchFor
func NewSearchForRequest(server string, pFor string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "for", runtime.ParamLocationPath, pFor)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/search/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSongGetbyIDRequest generates requests for SongGetbyID
func NewSongGetbyIDRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/song/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// AlbumGetbyIDWithResponse request
	AlbumGetbyIDWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*AlbumGetbyIDResponse, error)

	// ArtistGetbyIDWithResponse request
	ArtistGetbyIDWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*ArtistGetbyIDResponse, error)

	// PlayPauseWithResponse request
	PlayPauseWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PlayPauseResponse, error)

	// PlayUnpauseWithResponse request
	PlayUnpauseWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PlayUnpauseResponse, error)

	// PlayWithResponse request
	PlayWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*PlayResponse, error)

	// QueueDeleteFromByRangeWithResponse request
	QueueDeleteFromByRangeWithResponse(ctx context.Context, rangeStart int64, rangeEnd int64, reqEditors ...RequestEditorFn) (*QueueDeleteFromByRangeResponse, error)

	// QueueReorderWithResponse request
	QueueReorderWithResponse(ctx context.Context, indexFrom int64, indexTo int64, reqEditors ...RequestEditorFn) (*QueueReorderResponse, error)

	// EnqueueWithResponse request
	EnqueueWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*EnqueueResponse, error)

	// SearchForWithResponse request
	SearchForWithResponse(ctx context.Context, pFor string, reqEditors ...RequestEditorFn) (*SearchForResponse, error)

	// SongGetbyIDWithResponse request
	SongGetbyIDWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*SongGetbyIDResponse, error)
}

type AlbumGetbyIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Object
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r AlbumGetbyIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AlbumGetbyIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArtistGetbyIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Object
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r ArtistGetbyIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArtistGetbyIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PlayPauseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PlayPauseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PlayPauseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PlayUnpauseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PlayUnpauseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PlayUnpauseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PlayResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r PlayResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PlayResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueueDeleteFromByRangeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r QueueDeleteFromByRangeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueueDeleteFromByRangeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueueReorderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r QueueReorderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueueReorderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnqueueResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r EnqueueResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnqueueResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchForResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ObjectArray
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r SearchForResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchForResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SongGetbyIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Object
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r SongGetbyIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SongGetbyIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// AlbumGetbyIDWithResponse request returning *AlbumGetbyIDResponse
func (c *ClientWithResponses) AlbumGetbyIDWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*AlbumGetbyIDResponse, error) {
	rsp, err := c.AlbumGetbyID(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAlbumGetbyIDResponse(rsp)
}

// ArtistGetbyIDWithResponse request returning *ArtistGetbyIDResponse
func (c *ClientWithResponses) ArtistGetbyIDWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*ArtistGetbyIDResponse, error) {
	rsp, err := c.ArtistGetbyID(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArtistGetbyIDResponse(rsp)
}

// PlayPauseWithResponse request returning *PlayPauseResponse
func (c *ClientWithResponses) PlayPauseWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PlayPauseResponse, error) {
	rsp, err := c.PlayPause(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlayPauseResponse(rsp)
}

// PlayUnpauseWithResponse request returning *PlayUnpauseResponse
func (c *ClientWithResponses) PlayUnpauseWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PlayUnpauseResponse, error) {
	rsp, err := c.PlayUnpause(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlayUnpauseResponse(rsp)
}

// PlayWithResponse request returning *PlayResponse
func (c *ClientWithResponses) PlayWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*PlayResponse, error) {
	rsp, err := c.Play(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlayResponse(rsp)
}

// QueueDeleteFromByRangeWithResponse request returning *QueueDeleteFromByRangeResponse
func (c *ClientWithResponses) QueueDeleteFromByRangeWithResponse(ctx context.Context, rangeStart int64, rangeEnd int64, reqEditors ...RequestEditorFn) (*QueueDeleteFromByRangeResponse, error) {
	rsp, err := c.QueueDeleteFromByRange(ctx, rangeStart, rangeEnd, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueueDeleteFromByRangeResponse(rsp)
}

// QueueReorderWithResponse request returning *QueueReorderResponse
func (c *ClientWithResponses) QueueReorderWithResponse(ctx context.Context, indexFrom int64, indexTo int64, reqEditors ...RequestEditorFn) (*QueueReorderResponse, error) {
	rsp, err := c.QueueReorder(ctx, indexFrom, indexTo, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueueReorderResponse(rsp)
}

// EnqueueWithResponse request returning *EnqueueResponse
func (c *ClientWithResponses) EnqueueWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*EnqueueResponse, error) {
	rsp, err := c.Enqueue(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnqueueResponse(rsp)
}

// SearchForWithResponse request returning *SearchForResponse
func (c *ClientWithResponses) SearchForWithResponse(ctx context.Context, pFor string, reqEditors ...RequestEditorFn) (*SearchForResponse, error) {
	rsp, err := c.SearchFor(ctx, pFor, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchForResponse(rsp)
}

// SongGetbyIDWithResponse request returning *SongGetbyIDResponse
func (c *ClientWithResponses) SongGetbyIDWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*SongGetbyIDResponse, error) {
	rsp, err := c.SongGetbyID(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSongGetbyIDResponse(rsp)
}

// ParseAlbumGetbyIDResponse parses an HTTP response from a AlbumGetbyIDWithResponse call
func ParseAlbumGetbyIDResponse(rsp *http.Response) (*AlbumGetbyIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AlbumGetbyIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Object
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseArtistGetbyIDResponse parses an HTTP response from a ArtistGetbyIDWithResponse call
func ParseArtistGetbyIDResponse(rsp *http.Response) (*ArtistGetbyIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArtistGetbyIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Object
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePlayPauseResponse parses an HTTP response from a PlayPauseWithResponse call
func ParsePlayPauseResponse(rsp *http.Response) (*PlayPauseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PlayPauseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePlayUnpauseResponse parses an HTTP response from a PlayUnpauseWithResponse call
func ParsePlayUnpauseResponse(rsp *http.Response) (*PlayUnpauseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PlayUnpauseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePlayResponse parses an HTTP response from a PlayWithResponse call
func ParsePlayResponse(rsp *http.Response) (*PlayResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PlayResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseQueueDeleteFromByRangeResponse parses an HTTP response from a QueueDeleteFromByRangeWithResponse call
func ParseQueueDeleteFromByRangeResponse(rsp *http.Response) (*QueueDeleteFromByRangeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueueDeleteFromByRangeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseQueueReorderResponse parses an HTTP response from a QueueReorderWithResponse call
func ParseQueueReorderResponse(rsp *http.Response) (*QueueReorderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueueReorderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseEnqueueResponse parses an HTTP response from a EnqueueWithResponse call
func ParseEnqueueResponse(rsp *http.Response) (*EnqueueResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnqueueResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSearchForResponse parses an HTTP response from a SearchForWithResponse call
func ParseSearchForResponse(rsp *http.Response) (*SearchForResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchForResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ObjectArray
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSongGetbyIDResponse parses an HTTP response from a SongGetbyIDWithResponse call
func ParseSongGetbyIDResponse(rsp *http.Response) (*SongGetbyIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SongGetbyIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Object
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get an album info by ID.
	// (GET /album/{id})
	AlbumGetbyID(ctx echo.Context, id openapi_types.UUID) error
	// Get an artist info by ID.
	// (GET /artist/{id})
	ArtistGetbyID(ctx echo.Context, id openapi_types.UUID) error
	// Pause whatever is being played currently.
	// (POST /play/pause)
	PlayPause(ctx echo.Context) error
	// Unpause.
	// (POST /play/unpause)
	PlayUnpause(ctx echo.Context) error
	// Play queue, artist's album(s) or song.
	// (POST /play/{id})
	Play(ctx echo.Context, id openapi_types.UUID) error
	// Delete album or song(s) from the queue.
	// (DELETE /queue/delete/{range_start}/{range_end})
	QueueDeleteFromByRange(ctx echo.Context, rangeStart int64, rangeEnd int64) error
	// Reorder queue.
	// (POST /queue/move/{index_from}/{index_to})
	QueueReorder(ctx echo.Context, indexFrom int64, indexTo int64) error
	// Enqueue artist's album(s) or song.
	// (POST /queue/{id})
	Enqueue(ctx echo.Context, id openapi_types.UUID) error
	// Search for an artists, albums or songs.
	// (GET /search/{for})
	SearchFor(ctx echo.Context, pFor string) error
	// Get a song info by ID.
	// (GET /song/{id})
	SongGetbyID(ctx echo.Context, id openapi_types.UUID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AlbumGetbyID converts echo context to params.
func (w *ServerInterfaceWrapper) AlbumGetbyID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AlbumGetbyID(ctx, id)
	return err
}

// ArtistGetbyID converts echo context to params.
func (w *ServerInterfaceWrapper) ArtistGetbyID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ArtistGetbyID(ctx, id)
	return err
}

// PlayPause converts echo context to params.
func (w *ServerInterfaceWrapper) PlayPause(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PlayPause(ctx)
	return err
}

// PlayUnpause converts echo context to params.
func (w *ServerInterfaceWrapper) PlayUnpause(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PlayUnpause(ctx)
	return err
}

// Play converts echo context to params.
func (w *ServerInterfaceWrapper) Play(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Play(ctx, id)
	return err
}

// QueueDeleteFromByRange converts echo context to params.
func (w *ServerInterfaceWrapper) QueueDeleteFromByRange(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "range_start" -------------
	var rangeStart int64

	err = runtime.BindStyledParameterWithOptions("simple", "range_start", ctx.Param("range_start"), &rangeStart, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter range_start: %s", err))
	}

	// ------------- Path parameter "range_end" -------------
	var rangeEnd int64

	err = runtime.BindStyledParameterWithOptions("simple", "range_end", ctx.Param("range_end"), &rangeEnd, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter range_end: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.QueueDeleteFromByRange(ctx, rangeStart, rangeEnd)
	return err
}

// QueueReorder converts echo context to params.
func (w *ServerInterfaceWrapper) QueueReorder(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "index_from" -------------
	var indexFrom int64

	err = runtime.BindStyledParameterWithOptions("simple", "index_from", ctx.Param("index_from"), &indexFrom, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter index_from: %s", err))
	}

	// ------------- Path parameter "index_to" -------------
	var indexTo int64

	err = runtime.BindStyledParameterWithOptions("simple", "index_to", ctx.Param("index_to"), &indexTo, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter index_to: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.QueueReorder(ctx, indexFrom, indexTo)
	return err
}

// Enqueue converts echo context to params.
func (w *ServerInterfaceWrapper) Enqueue(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Enqueue(ctx, id)
	return err
}

// SearchFor converts echo context to params.
func (w *ServerInterfaceWrapper) SearchFor(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "for" -------------
	var pFor string

	err = runtime.BindStyledParameterWithOptions("simple", "for", ctx.Param("for"), &pFor, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter for: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SearchFor(ctx, pFor)
	return err
}

// SongGetbyID converts echo context to params.
func (w *ServerInterfaceWrapper) SongGetbyID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SongGetbyID(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/album/:id", wrapper.AlbumGetbyID)
	router.GET(baseURL+"/artist/:id", wrapper.ArtistGetbyID)
	router.POST(baseURL+"/play/pause", wrapper.PlayPause)
	router.POST(baseURL+"/play/unpause", wrapper.PlayUnpause)
	router.POST(baseURL+"/play/:id", wrapper.Play)
	router.DELETE(baseURL+"/queue/delete/:range_start/:range_end", wrapper.QueueDeleteFromByRange)
	router.POST(baseURL+"/queue/move/:index_from/:index_to", wrapper.QueueReorder)
	router.POST(baseURL+"/queue/:id", wrapper.Enqueue)
	router.GET(baseURL+"/search/:for", wrapper.SearchFor)
	router.GET(baseURL+"/song/:id", wrapper.SongGetbyID)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xYYW/bNhP+KwTfF1gLaJHXZMPgfcqQpgiaLVnafCqClhZPMguJVEnKiWD4vw93lCw7",
	"khNl7Yo5n2xRd8fn7p47irfkiSlKo0F7x6dL7pI5FIL+vrbWWPxTWlOC9QpoOTES8NfXJfApd94qnfFV",
	"xAtwTmRD71YRt/ClUhYkn34IFjr5m6iVN7PPkHi0dRH+9TYX1l9fneO/1NhCeD7llc151Eej5LZUpeSQ",
	"mBYFXNj3yucEvBB356AzP+fTn179GvFC6fb5cEDb1+UtqklwiVWlV0bzKT/WTFivnI+Y0Ezks6pgxjLB",
	"nNEZjzjoqsA4BCEecRLhEaf3NxGHO1GUCIi/FU5oYO/Bmz761c7AHVsr6j6wc+U8M2mDzkUBm0NwuLXj",
	"EVceCor0/y2kfMr/F3f8iBtyxBfr7Zr9Be23QkRKp6a/c1E5lbAyFzVYprQHm4oEDtCnEPodEuxHdlGC",
	"Pr48Y4cHEx7xBVgXTC4mBz8LxGBK0KJUfMoPDyYHRzzipfBzciImB+Olkit8zMD3ob0B36UJ0bNZzc5O",
	"EBsyT6DYmcS0osQb8LP67IQ2saIAD9bx6Yf7RoO1T0p+wpjiCmLigW98yomMXU14W0HU1N4I2q5uUNmV",
	"RrtQFq8mk1Ca2oMmH0VZ5ioh8PFnh5iWG/bHJBeTue3UxdvfWGoqLZmrknmIGCbgaHLUD+ufxs+VzoIC",
	"J1upqHL/zXCG9jQA81rDXQmJB8mgkYm4q4pC2PrhfHuROSpM8uwG9eJQK+MoRKIPc4hExpIo2HvmLApN",
	"cG9pNJTzNY+Cb4FI2NriUlSODprSuAEiXeJrdjsXHhbYBh2bAXpPbVGypLIWtM/rPrEuc1GTNh9Oaj8H",
	"BEXSwZRbELJuVu75+RRIrd/4btPrSj/i93UQGHareTnasWa3bddyUbdnZufbxra7oLd1vyNfuajZlwoq",
	"iBom/OBCZ3nhXrbH6rBXjxX/2Qmd1BufEr3viO/WEQbI08ZzR9legTOVTYApCdqrVIHE8sBWxrTx/71y",
	"Hp3JAaKQWiwhBw/x0gqdwUfnhfWr9gl0YFGQ6YfrhNa7FONmuG9qTcH8HAKyPpH+wuWgfGpN8Xt9hds9",
	"Rq0ZZEprLGKTMoKkjGaElL3ILICsXw7Ta8O3cTxT2v9y1BENv+syoNjfBwVa/kM4oOVXghlNe0qDfD6s",
	"H8+7lva0sMX7wiwgXiot4e4j6q3aB28e6Jx/mAUw0CGg2wAwZGLmTF55wDULufBqAYzM7iiCKzBWgn2M",
	"+hpug0/BWNtiR7XWtYffmvpfDYouh/taAE8ibJPmMbx8+OR+Haj3lFO7Udnvg/u5dbBReRwiiQNhk3m8",
	"TI3dfbF7R0IsxeTpnWOTPlWC3qmx/95RnJLx3YzZmmQ9Msj6DjfB425CtPM6aApgFlyVe7d/98HxVGnZ",
	"GBjY0tHobMSQIRyQD00Y3hmdjZwvkK3nPV2ghrufs4WhVK+pQ4NiMtwsDd5MiXJRe62huy6jOWuXZLrG",
	"9D9JuutQJxoe+7KnSsvtwy5qD7pGs2F6X/W4m5500uuJUE96PbLbEG6GkL3O3QZvAwVx4Wb1dwAAAP//",
	"C3Uv2fMYAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
