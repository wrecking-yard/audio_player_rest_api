openapi: 3.0.4
info:
  title: music player interface - OpenAPI 3.0
  description: |-
    music player interface.
  version: v0.5a
tags:
  - name: play
    description: Play songs, queue, pause music
  - name: queue
    description: Play queue
  - name: search
    description: Find artist, album, song
  - name: artist
    description: Artist info
  - name: album
    description: Album info
  - name: song
    description: Song info
paths:

  /play/{id}:
    post:
      tags:
        - play
      summary: Play queue, artist's album(s) or song.
      description: Play queue, artist's album(s) or song.
      operationId: play
      parameters:
        - name: id
          in: path
          description: ID of an artist, album or a song
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK; playing
        '404':
          description: Resource identified by `id` not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
                
  /play/pause:
    post:
      tags:
        - play
      summary: Pause whatever is being played currently.
      description: Pause whatever is being played currently.
      operationId: playPause
      responses:
        '200':
          description: OK; paused or already paused

  /play/unpause:
    post:
      tags:
        - play
      summary: Unpause.
      description: Unpause.
      operationId: playUnpause
      responses:
        '200':
          description: OK; unpaused or already playing


  /queue/{id}:
    post:
      tags:
        - queue
      summary: Enqueue artist's album(s) or song.
      description: Enqueue artist's album(s) or song.
      operationId: enqueue
      parameters:
        - name: id
          in: path
          description: ID of an artist, album or a song
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK; queued
        '404':
          description: Resource identified by `id` not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
                
  /queue/move/{index_from}/{index_to}:
    post:
      tags:
        - queue
      summary: Reorder queue.
      description: Move enqueued album or song by absolute or relative index.
      operationId: queueReorder
      parameters:
        - name: index_from
          in: path
          description: new queue index of an album or a song
          required: true
          schema:
            type: integer
            format: int64
        - name: index_to
          in: path
          description: new queue index of an album or a song
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK; queued
        '404':
          description: Resource identified by `id` not found
        default:
          description: Unexpected error

  /queue/delete/{range_start}/{range_end}:
    delete:
      tags:
        - queue
      summary: Delete album or song(s) from the queue.
      description: Delete album or song(s) from the queue.
      operationId: queueDeleteFromByRange
      parameters:
        - name: range_start
          in: path
          description: beginning of deletion range (greedy)
          required: true
          schema:
            type: integer
            format: int64
        - name: range_end
          in: path
          description: end of deletion range (greedy)
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK; queued
        '404':
          description: Resource identified by `id` not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
                
  /search/{for}:
    get:
      tags:
        - search
      summary: Search for an artists, albums or songs.
      description: Search for an artists, albums or songs.
      operationId: searchFor
      parameters:
        - name: for
          in: path
          description: beginning of deletion range (greedy)
          required: true
          schema:
            type: string
            minLength: 3
            maxLength: 12
      responses:
        '200':
          description: OK; found some results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectArray'
        '404':
          description: Nothing found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  
  /artist/{id}:
    get:
      tags:
        - artist
      summary: Get an artist info by ID.
      description: Get an artist info by ID.  
      operationId: artistGetbyID
      parameters:
        - name: id
          in: path
          description: artist `id`
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK; found such artist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Object'
        '404':
          description: Nothing found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  
  /album/{id}:
    get:
      tags:
        - album
      summary: Get an album info by ID.
      description: Get an album info by ID.  
      operationId: albumGetbyID
      parameters:
        - name: id
          in: path
          description: album `id`
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK; found such album
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Object'
        '404':
          description: Nothing found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
                
  /song/{id}:
    get:
      tags:
        - song
      summary: Get a song info by ID.
      description: Get a song info by ID.  
      operationId: songGetbyID
      parameters:
        - name: id
          in: path
          description: song `id`
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK; found such song
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Object'
        '404':
          description: Nothing found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  
components:
  schemas:
    Object:
      type: object
      properties:
        id:
          type: string
          format: uuid
        nameOrTitle:
          type: string
          minLength: 3
          maxLength: 128
        artURL:
          type: string
          format: url
        typw:
          type: string
          description: An artist, an album or a song
          example: Kasane Teto
          enum:
            - artist
            - album
            - song

    ObjectArray:
      description: List of artists, albums or songs
      type: array
      items:
        $ref: '#/components/schemas/Object'

    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message

